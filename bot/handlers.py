
from telegram.ext import CommandHandler, MessageHandler, ContextTypes, filters
from telegram import Update
from core.logic import generate_summary
from core.database import add_to_buffer, get_buffer_summary
from core.export import run_export

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–±–ª—ñ–∫—É –±—é–¥–∂–µ—Ç—É. –í–≤–µ–¥–∏ /add <—Å—É–º–∞> <–∫–∞—Ç–µ–≥–æ—Ä—ñ—è> <–æ–ø–∏—Å>")

async def add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        amount = float(context.args[0])
        category = context.args[1]
        description = " ".join(context.args[2:]) if len(context.args) > 2 else "‚Äî"
        add_to_buffer(amount, category, description)
        await update.message.reply_text(f"üìù –î–æ–¥–∞–Ω–æ –¥–æ –±—É—Ñ–µ—Ä–∞: {amount} –≥—Ä–Ω | {category} | {description}")
    except:
        await update.message.reply_text("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç: /add 200 –ü—Ä–æ–¥—É–∫—Ç–∏ –ê—à–∞–Ω")

async def summary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    result = generate_summary()
    await update.message.reply_text(result)

async def report_buffer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    result = get_buffer_summary()
    await update.message.reply_text(result or "–ë—É—Ñ–µ—Ä –ø—É—Å—Ç–∏–π.")

async def export(update: Update, context: ContextTypes.DEFAULT_TYPE):
    path = run_export()
    if path:
        await update.message.reply_document(document=open(path, "rb"))
    else:
        await update.message.reply_text("‚ö†Ô∏è –ï–∫—Å–ø–æ—Ä—Ç –Ω–µ –≤–¥–∞–≤—Å—è.")

def setup_handlers(app):
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("add", add))
    app.add_handler(CommandHandler("summary", summary))
    app.add_handler(CommandHandler("report_buffer", report_buffer))
    app.add_handler(CommandHandler("export", export))
