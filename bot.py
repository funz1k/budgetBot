# –û—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç —Å –±—É—Ñ–µ—Ä–æ–º, –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –∞–≤—Ç–æ—ç–∫—Å–ø–æ—Ä—Ç–æ–º
import logging
import sqlite3
import os
import datetime
import zipfile
from dotenv import load_dotenv
from apscheduler.schedulers.background import BackgroundScheduler
from telegram import Update, InputFile, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

conn = sqlite3.connect("budget.db", check_same_thread=False)
cursor = conn.cursor()
cursor.execute("""CREATE TABLE IF NOT EXISTS expenses (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    amount REAL,
    category TEXT,
    description TEXT,
    date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
)""")
cursor.execute("""CREATE TABLE IF NOT EXISTS buffer_expenses (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    amount REAL,
    category TEXT,
    description TEXT,
    date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
)""")
conn.commit()

user_keyboard = ReplyKeyboardMarkup([
    ["‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞—Ç—É", "üìä –°–≤–æ–¥–∫–∞ –¥–Ω—è"],
    ["üßæ –ß–µ–∫–∏ / –º–µ–¥–∏–∞", "üì§ –í—ã–≥—Ä—É–∑–∏—Ç—å"],
    ["üìë –ü–æ–º–æ—â—å", "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏"]
], resize_keyboard=True)

admin_keyboard = ReplyKeyboardMarkup([
    ["‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å (commit)", "üóë –û—á–∏—Å—Ç–∏—Ç—å –±—É—Ñ–µ—Ä"],
    ["üìÇ –ü–æ–∫–∞–∑–∞—Ç—å –±—É—Ñ–µ—Ä", "üîÅ –°–±—Ä–æ—Å / –Ω–æ–≤—ã–π –¥–µ–Ω—å"]
], resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç!", reply_markup=user_keyboard)

async def add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        amount = float(context.args[0])
        category = context.args[1]
        description = " ".join(context.args[2:])
        cursor.execute("INSERT INTO buffer_expenses (amount, category, description) VALUES (?, ?, ?)", (amount, category, description))
        conn.commit()
        await update.message.reply_text(f"üìù –ë—É—Ñ–µ—Ä: {amount} –≥—Ä–Ω | {category} | {description}")
    except:
        await update.message.reply_text("–û—à–∏–±–∫–∞. –ü—Ä–∏–º–µ—Ä: /add 200 –ü—Ä–æ–¥—É–∫—Ç—ã –ê—à–∞–Ω")

async def report_buffer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cursor.execute("SELECT category, SUM(amount) FROM buffer_expenses GROUP BY category")
    rows = cursor.fetchall()
    if not rows:
        await update.message.reply_text("–ë—É—Ñ–µ—Ä –ø—É—Å—Ç.")
        return
    text = "\n".join([f"{row[0]}: {round(row[1], 2)} –≥—Ä–Ω" for row in rows])
    await update.message.reply_text("üìä –ë—É—Ñ–µ—Ä —Ä–∞—Å—Ö–æ–¥–æ–≤:\n" + text)

async def commit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cursor.execute("INSERT INTO expenses (amount, category, description, date) SELECT amount, category, description, date FROM buffer_expenses")
    cursor.execute("DELETE FROM buffer_expenses")
    conn.commit()
    if os.path.exists("media_buffer"):
        os.makedirs("media", exist_ok=True)
        for file in os.listdir("media_buffer"):
            os.rename(os.path.join("media_buffer", file), os.path.join("media", file))
    await update.message.reply_text("‚úÖ –ë—É—Ñ–µ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –±–∞–∑—É.")

async def discard(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cursor.execute("DELETE FROM buffer_expenses")
    conn.commit()
    if os.path.exists("media_buffer"):
        for file in os.listdir("media_buffer"):
            os.remove(os.path.join("media_buffer", file))
    await update.message.reply_text("üóë –ë—É—Ñ–µ—Ä –æ—á–∏—â–µ–Ω.")

async def summary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    benchmarks = {
        "–ñ–∏–ª—å—ë": 17000,
        "–ü—Ä–æ–¥—É–∫—Ç—ã": 9468,
        "–°—Ç–∏–∫–∏": 8100,
        "–ö–∞—Ñ–µ": 6312,
        "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç": 3156
    }
    cursor.execute("SELECT category, SUM(amount) FROM expenses GROUP BY category")
    rows = cursor.fetchall()
    text = ""
    for cat, benchmark in benchmarks.items():
        total = sum(row[1] for row in rows if cat.lower() in row[0].lower())
        delta = total - benchmark
        text += f"{cat}: {round(total, 2)} / {benchmark} –≥—Ä–Ω (Œî {round(delta, 2)})\n"
    await update.message.reply_text("üìâ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å —ç—Ç–∞–ª–æ–Ω–æ–º:\n" + text)

async def handle_media(update: Update, context: ContextTypes.DEFAULT_TYPE):
    path = "media_buffer"
    os.makedirs(path, exist_ok=True)
    file_id = None
    if update.message.photo:
        file_id = update.message.photo[-1].file_id
    elif update.message.document:
        file_id = update.message.document.file_id
    elif update.message.voice:
        file_id = update.message.voice.file_id
    else:
        return
    file = await context.bot.get_file(file_id)
    now = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    ext = file.file_path.split('.')[-1]
    filename = f"{path}/media_{now}.{ext}"
    await file.download_to_drive(filename)
    await update.message.reply_text("üßæ –ß–µ–∫ –∏–ª–∏ —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±—É—Ñ–µ—Ä")

async def export(update: Update = None, context: ContextTypes.DEFAULT_TYPE = None):
    archive_name = "budget_export.zip"
    cursor.execute("SELECT amount, category, description, date FROM expenses")
    rows = cursor.fetchall()
    with open("expenses.csv", "w", encoding="utf-8") as f:
        f.write("amount,category,description,date\n")
        for r in rows:
            f.write(f"{r[0]},{r[1]},{r[2]},{r[3]}\n")
    with zipfile.ZipFile(archive_name, 'w') as zipf:
        zipf.write("expenses.csv")
        if os.path.exists("media"):
            for root, _, files in os.walk("media"):
                for file in files:
                    path = os.path.join(root, file)
                    zipf.write(path)
    os.remove("expenses.csv")
    if os.path.exists("media"):
        for file in os.listdir("media"):
            os.remove(os.path.join("media", file))
    if update:
        await update.message.reply_document(InputFile(archive_name))
    os.remove(archive_name)

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=user_keyboard)

async def menu_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üõ† –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –º–µ–Ω—é:", reply_markup=admin_keyboard)

app = ApplicationBuilder().token(TOKEN).build()

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –≤—ã–≥—Ä—É–∑–∫–∏
scheduler = BackgroundScheduler()
scheduler.add_job(lambda: app.create_task(export()), 'cron', hour=23, minute=59)
scheduler.start()

app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("add", add))
app.add_handler(CommandHandler("report_buffer", report_buffer))
app.add_handler(CommandHandler("commit", commit))
app.add_handler(CommandHandler("discard", discard))
app.add_handler(CommandHandler("summary", summary))
app.add_handler(CommandHandler("export", export))
app.add_handler(CommandHandler("menu", menu))
app.add_handler(CommandHandler("menu_admin", menu_admin))
app.add_handler(MessageHandler(filters.PHOTO | filters.Document.ALL | filters.VOICE, handle_media))

if __name__ == '__main__':
    app.run_polling()
